{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\siebe\\\\Cursor\\\\JapVoc by section\\\\src\\\\components\\\\QuizModeSelector.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useTheme } from '../context/ThemeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizModeSelector = ({\n  selectedMode,\n  onModeSelect,\n  availableModes = ['multiple-choice', 'writing', 'flashcards']\n}) => {\n  _s();\n  const {\n    theme,\n    isDarkMode\n  } = useTheme();\n  const getThemeClasses = () => {\n    if (isDarkMode) {\n      return {\n        container: 'bg-dark-card',\n        text: 'text-dark-text',\n        button: {\n          active: 'bg-primary text-white',\n          inactive: 'bg-dark-hover text-dark-text hover:bg-dark-border'\n        }\n      };\n    }\n    switch (theme) {\n      case 'blue':\n        return {\n          container: 'bg-blue-card',\n          text: 'text-blue-text',\n          button: {\n            active: 'bg-primary text-white',\n            inactive: 'bg-blue-hover text-blue-text hover:bg-blue-border'\n          }\n        };\n      case 'green':\n        return {\n          container: 'bg-green-card',\n          text: 'text-green-text',\n          button: {\n            active: 'bg-primary text-white',\n            inactive: 'bg-green-hover text-green-text hover:bg-green-border'\n          }\n        };\n      default:\n        return {\n          container: 'bg-white',\n          text: 'text-gray-800',\n          button: {\n            active: 'bg-primary text-white',\n            inactive: 'bg-gray-50 text-gray-800 hover:bg-gray-100'\n          }\n        };\n    }\n  };\n  const themeClasses = getThemeClasses();\n  const getModeLabel = mode => {\n    switch (mode) {\n      case 'multiple-choice':\n        return 'Multiple Choice';\n      case 'writing':\n        return 'Writing';\n      case 'flashcards':\n        return 'Flashcards';\n      default:\n        return mode;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${themeClasses.container} p-4 rounded-lg shadow-md mb-6`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: `text-lg font-semibold mb-4 ${themeClasses.text}`,\n      children: \"Select Practice Mode:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-2\",\n      children: availableModes.map(mode => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => onModeSelect(mode),\n        className: `px-4 py-2 rounded-lg transition-colors ${selectedMode === mode ? themeClasses.button.active : themeClasses.button.inactive}`,\n        children: getModeLabel(mode)\n      }, mode, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizModeSelector, \"6crnc36OFs3OKW5x7h9rLc09NXI=\", false, function () {\n  return [useTheme];\n});\n_c = QuizModeSelector;\nexport default QuizModeSelector;\nvar _c;\n$RefreshReg$(_c, \"QuizModeSelector\");","map":{"version":3,"names":["React","useTheme","jsxDEV","_jsxDEV","QuizModeSelector","selectedMode","onModeSelect","availableModes","_s","theme","isDarkMode","getThemeClasses","container","text","button","active","inactive","themeClasses","getModeLabel","mode","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/siebe/Cursor/JapVoc by section/src/components/QuizModeSelector.tsx"],"sourcesContent":["import React from 'react';\r\nimport { useTheme } from '../context/ThemeContext';\r\n\r\nexport type QuizMode = 'multiple-choice' | 'writing' | 'flashcards';\r\n\r\ninterface QuizModeSelectorProps {\r\n  selectedMode: QuizMode;\r\n  onModeSelect: (mode: QuizMode) => void;\r\n  availableModes?: QuizMode[];\r\n}\r\n\r\nconst QuizModeSelector: React.FC<QuizModeSelectorProps> = ({\r\n  selectedMode,\r\n  onModeSelect,\r\n  availableModes = ['multiple-choice', 'writing', 'flashcards'],\r\n}) => {\r\n  const { theme, isDarkMode } = useTheme();\r\n\r\n  const getThemeClasses = () => {\r\n    if (isDarkMode) {\r\n      return {\r\n        container: 'bg-dark-card',\r\n        text: 'text-dark-text',\r\n        button: {\r\n          active: 'bg-primary text-white',\r\n          inactive: 'bg-dark-hover text-dark-text hover:bg-dark-border',\r\n        },\r\n      };\r\n    }\r\n\r\n    switch (theme) {\r\n      case 'blue':\r\n        return {\r\n          container: 'bg-blue-card',\r\n          text: 'text-blue-text',\r\n          button: {\r\n            active: 'bg-primary text-white',\r\n            inactive: 'bg-blue-hover text-blue-text hover:bg-blue-border',\r\n          },\r\n        };\r\n      case 'green':\r\n        return {\r\n          container: 'bg-green-card',\r\n          text: 'text-green-text',\r\n          button: {\r\n            active: 'bg-primary text-white',\r\n            inactive: 'bg-green-hover text-green-text hover:bg-green-border',\r\n          },\r\n        };\r\n      default:\r\n        return {\r\n          container: 'bg-white',\r\n          text: 'text-gray-800',\r\n          button: {\r\n            active: 'bg-primary text-white',\r\n            inactive: 'bg-gray-50 text-gray-800 hover:bg-gray-100',\r\n          },\r\n        };\r\n    }\r\n  };\r\n\r\n  const themeClasses = getThemeClasses();\r\n\r\n  const getModeLabel = (mode: QuizMode): string => {\r\n    switch (mode) {\r\n      case 'multiple-choice':\r\n        return 'Multiple Choice';\r\n      case 'writing':\r\n        return 'Writing';\r\n      case 'flashcards':\r\n        return 'Flashcards';\r\n      default:\r\n        return mode;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`${themeClasses.container} p-4 rounded-lg shadow-md mb-6`}>\r\n      <h3 className={`text-lg font-semibold mb-4 ${themeClasses.text}`}>\r\n        Select Practice Mode:\r\n      </h3>\r\n      <div className=\"flex flex-wrap gap-2\">\r\n        {availableModes.map((mode) => (\r\n          <button\r\n            key={mode}\r\n            onClick={() => onModeSelect(mode)}\r\n            className={`px-4 py-2 rounded-lg transition-colors ${\r\n              selectedMode === mode\r\n                ? themeClasses.button.active\r\n                : themeClasses.button.inactive\r\n            }`}\r\n          >\r\n            {getModeLabel(mode)}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizModeSelector; "],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAUnD,MAAMC,gBAAiD,GAAGA,CAAC;EACzDC,YAAY;EACZC,YAAY;EACZC,cAAc,GAAG,CAAC,iBAAiB,EAAE,SAAS,EAAE,YAAY;AAC9D,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAExC,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAID,UAAU,EAAE;MACd,OAAO;QACLE,SAAS,EAAE,cAAc;QACzBC,IAAI,EAAE,gBAAgB;QACtBC,MAAM,EAAE;UACNC,MAAM,EAAE,uBAAuB;UAC/BC,QAAQ,EAAE;QACZ;MACF,CAAC;IACH;IAEA,QAAQP,KAAK;MACX,KAAK,MAAM;QACT,OAAO;UACLG,SAAS,EAAE,cAAc;UACzBC,IAAI,EAAE,gBAAgB;UACtBC,MAAM,EAAE;YACNC,MAAM,EAAE,uBAAuB;YAC/BC,QAAQ,EAAE;UACZ;QACF,CAAC;MACH,KAAK,OAAO;QACV,OAAO;UACLJ,SAAS,EAAE,eAAe;UAC1BC,IAAI,EAAE,iBAAiB;UACvBC,MAAM,EAAE;YACNC,MAAM,EAAE,uBAAuB;YAC/BC,QAAQ,EAAE;UACZ;QACF,CAAC;MACH;QACE,OAAO;UACLJ,SAAS,EAAE,UAAU;UACrBC,IAAI,EAAE,eAAe;UACrBC,MAAM,EAAE;YACNC,MAAM,EAAE,uBAAuB;YAC/BC,QAAQ,EAAE;UACZ;QACF,CAAC;IACL;EACF,CAAC;EAED,MAAMC,YAAY,GAAGN,eAAe,CAAC,CAAC;EAEtC,MAAMO,YAAY,GAAIC,IAAc,IAAa;IAC/C,QAAQA,IAAI;MACV,KAAK,iBAAiB;QACpB,OAAO,iBAAiB;MAC1B,KAAK,SAAS;QACZ,OAAO,SAAS;MAClB,KAAK,YAAY;QACf,OAAO,YAAY;MACrB;QACE,OAAOA,IAAI;IACf;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKiB,SAAS,EAAE,GAAGH,YAAY,CAACL,SAAS,gCAAiC;IAAAS,QAAA,gBACxElB,OAAA;MAAIiB,SAAS,EAAE,8BAA8BH,YAAY,CAACJ,IAAI,EAAG;MAAAQ,QAAA,EAAC;IAElE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLtB,OAAA;MAAKiB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,EAClCd,cAAc,CAACmB,GAAG,CAAEP,IAAI,iBACvBhB,OAAA;QAEEwB,OAAO,EAAEA,CAAA,KAAMrB,YAAY,CAACa,IAAI,CAAE;QAClCC,SAAS,EAAE,0CACTf,YAAY,KAAKc,IAAI,GACjBF,YAAY,CAACH,MAAM,CAACC,MAAM,GAC1BE,YAAY,CAACH,MAAM,CAACE,QAAQ,EAC/B;QAAAK,QAAA,EAEFH,YAAY,CAACC,IAAI;MAAC,GARdA,IAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASH,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjB,EAAA,CAvFIJ,gBAAiD;EAAA,QAKvBH,QAAQ;AAAA;AAAA2B,EAAA,GALlCxB,gBAAiD;AAyFvD,eAAeA,gBAAgB;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}